def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

//打包时去掉这句
project.setProperty('target-platform', 'android-arm')

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply from: 'tinker-support.gradle'
//多渠道使用walle
apply from: 'multiple-channel.gradle'

def releaseTime() {
    return new Date().format("yyyyMMdd_HHmm", TimeZone.getTimeZone("GMT+08"))
}

android {

    signingConfigs {
        config {
            keyAlias 'lighthouse'
            keyPassword 'zxcvbnm,./'
            storeFile file('lighthouse.jks')
            storePassword 'zxcvbnm,./'
        }
    }

    compileSdkVersion 29

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.fblock.lighthouse"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        flavorDimensions "default"

        ndk {
            //x86为了可以在模拟器上测试，打包时去掉x86
            abiFilters "armeabi-v7a", "x86"
            //abiFilters "armeabi-v7a"
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME : applicationId,
                JPUSH_APPKEY : "045af7241e8847d98c3112e1", // NOTE: JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL : "official", //暂时填写默认值即可.
        ]
    }

    buildTypes {
        debug {
            multiDexEnabled true
            minifyEnabled false

            signingConfig signingConfigs.config
        }

        release {
            multiDexEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

//            applicationVariants.all { variant ->
//                variant.outputs.all {
//                    outputFileName = "lighthouse_V${variant.versionName}_${releaseTime()}_${variant.name}.apk"
//                }
//            }
            signingConfig signingConfigs.config
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // 多dex配置
    implementation 'androidx.multidex:multidex:2.0.0'
    // 远程仓库集成方式（推荐）
    implementation 'com.tencent.bugly:crashreport_upgrade:1.5.0'
    //1. 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
    //2.为了便于解答问题，这里的tinker版本建议跟随此处demo设置，如果微信更新了tinker版本，bugly会定期同步更新
    implementation 'com.tencent.tinker:tinker-android-lib:1.9.14.10'
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'

    compile 'com.meituan.android.walle:library:1.1.7'
}